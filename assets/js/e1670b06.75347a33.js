"use strict";(self.webpackChunkkira_documentation=self.webpackChunkkira_documentation||[]).push([[6715],{9725:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=r(5893),a=r(1151);r(4866),r(5162);const i={title:"Key Management",sidebar_position:4,slug:"key-management"},o=void 0,s={id:"key-management",title:"Key Management",description:"If it ever happened to you that you forgot to save your validator signing key and/or wanted to recover your node together with its original Node Id but the CLI does not support that? fear not. In this document, we provide a reliable secret derivation method that will allow you to always recover all your secrets using just a single mnemonic and stay compatible with the KIRA Manager (KM) tool.",source:"@site/tabs/testnet/key-management.mdx",sourceDirName:".",slug:"/key-management",permalink:"/testnet/key-management",draft:!1,unlisted:!1,editUrl:"https://github.com/KiraCore/docs.kira.network/issues/new?assignees=&labels=documentation,issue&projects=&template=report_an_issue.yaml&title=%5BISSUE+REPORT%5D&page-github=/testnet/key-management&page-local=key-management.mdx",tags:[],version:"current",lastUpdatedAt:1716175504,formattedLastUpdatedAt:"May 20, 2024",sidebarPosition:4,frontMatter:{title:"Key Management",sidebar_position:4,slug:"key-management"},sidebar:"defaultSidebar",previous:{title:"Evangelist",permalink:"/testnet/evangelist"},next:{title:"WSL2 Support",permalink:"/testnet/wsl2-support"}},l={},d=[{value:"Key Types",id:"9ec6a525a6204eb1a75f22b7d000f052",level:2},{value:"Mnemonic Derivation",id:"8f8624aa1ae34cb5a4c84b9f55fbcb68",level:2},{value:"Signing &amp; Node Key Derivation",id:"c2e623903b9d4b329dc8060d1e24a4df",level:2},{value:"Public Address Derivation",id:"e1756f56cea54395b43a445b1a189159",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"If it ever happened to you that you forgot to save your validator signing key and/or wanted to recover your node together with its original Node Id but the CLI does not support that? fear not. In this document, we provide a reliable secret derivation method that will allow you to always recover all your secrets using just a single mnemonic and stay compatible with the KIRA Manager (KM) tool."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Key management with the testnet tool KIRA Manager (KM) should NOT be considered safe nor used on the mainnet as all mnemonics remain unencrypted on your device and can easily be compromised due to human fault or any malicious process that is already running on your device. Despite the significant vulnerability present in the KM we want to allow everyone to accustom themselves with the KIRA stack seamlessly before designing and building their own infrastructure. If you choose to run KM on the mainnet you are doing so at your own responsibility and in such case we highly encourage self-hosting in your own home environment using open-source hardware such as Raspberry Pi."})})}),"\n",(0,t.jsx)(n.h2,{id:"9ec6a525a6204eb1a75f22b7d000f052",children:"Key Types"}),"\n",(0,t.jsx)(n.p,{children:"On the testnet, you will find yourself in possession of at least 4 types of cryptographic secrets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validator Address Key"})," - In order to participate as a new testnet validator, you must generate and safeguard the initial secret key, which is used to derive your public KIRA address.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["type: ",(0,t.jsx)(n.code,{children:"secp256k1"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validator Signing Key"})," - When your node is started for the first time ",(0,t.jsx)(n.code,{children:"sekai"})," automatically generates a so-called validator signing key. When you claim a validator seat the public key derived from this secret becomes associated with your validator. This key is used to sign blocks that your validator node will be proposing or agreeing on with other nodes in the consensus.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["type: ",(0,t.jsx)(n.code,{children:"ed25519"})]}),"\n",(0,t.jsxs)(n.li,{children:["location: ",(0,t.jsx)(n.code,{children:"$SEKAID_HOME/config/priv_validator_key.json"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Key"})," - When your ",(0,t.jsx)(n.code,{children:"sekai"})," node communicates with other nodes via P2P it authenticates using a node key and a corresponding node id derived from this secret.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["type: ",(0,t.jsx)(n.code,{children:"ed25519"})]}),"\n",(0,t.jsxs)(n.li,{children:["location: ",(0,t.jsx)(n.code,{children:"$SEKAID_HOME/config/node_key.json"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"INTERX Signing Key"})," - This key is used by the interx nodes to prove that messages sent to the client originate from the trusted node operator without the need for HTTPS, its native form is a mnemonic supplied in the configuration file.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["type: ",(0,t.jsx)(n.code,{children:"secp256k1"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"8f8624aa1ae34cb5a4c84b9f55fbcb68",children:"Mnemonic Derivation"}),"\n",(0,t.jsxs)(n.p,{children:["For the sake of convenience, each type of KIRA node deployed through KM derives a specific set of mnemonics from a ",(0,t.jsx)(n.code,{children:"MASTER_MNEMONIC"})," in a deterministic manner, utilizing our proprietary seed words generation tool known as bip39gen. This tool is readily available in the ",(0,t.jsx)(n.a,{href:"https://github.com/KiraCore/tools/releases",children:"tools repository on GitHub"}),", with pre-compiled binaries for ",(0,t.jsx)(n.code,{children:"Linux"}),", ",(0,t.jsx)(n.code,{children:"Mac"}),", and ",(0,t.jsx)(n.code,{children:"Windows"})," available on the release page. Rather than requiring installation, these binaries can simply be downloaded and executed on any operating system. To ensure the authenticity of the file, we strongly suggest verifying the ",(0,t.jsx)(n.code,{children:"sha256"})," hash and/or ",(0,t.jsx)(n.code,{children:"cosign"})," signature that is provided alongside the official release."]}),"\n",(0,t.jsx)(n.p,{children:":::\ud83d\udccc"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"The prerequisite to install bip39gen is Bash Utils (BU) tool, please refer to"})," ",(0,t.jsx)(n.a,{href:"/testnet/bu-setup",children:(0,t.jsx)(n.em,{children:"BU Setup page"})})," ",(0,t.jsx)(n.em,{children:"before proceeding."})]}),"\n",(0,t.jsx)(n.p,{children:":::"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Secure"})," ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"bip39gen"})})," ",(0,t.jsx)(n.strong,{children:"Setup"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# assume root permissions\nsudo -s\n\n# Download and install bip39gen\nTOOLS_VERSION="v0.3.42" && TOOL_NAME="bip39gen" && cd /tmp && \\\n safeWget ./${TOOL_NAME}.deb "https://github.com/KiraCore/tools/releases/download/$TOOLS_VERSION/${TOOL_NAME}-$(getPlatform)-$(getArch).deb" \\\n "QmeqFDLGfwoWgCy2ZEFXerVC5XW8c5xgRyhK5bLArBr2ue" && rm -rfv ./$TOOL_NAME && dpkg-deb -x ./${TOOL_NAME}.deb ./$TOOL_NAME && \\\n cp -fv ./$TOOL_NAME/bin/$TOOL_NAME /usr/local/bin/$TOOL_NAME && chmod +x "/usr/local/bin/$TOOL_NAME" && \\\n rm -rfv ./$TOOL_NAME ./${TOOL_NAME}.deb\n\n# Check bip39gen version\nbip39gen version\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MASTER_MNEMONIC"})," is the only secret you will ever need to remember. All other secrets are derived from it such as your whitelisted validator KIRA address, validator signing key, node keys, faucet address, interx signing key, and so on. Our derivation method simply takes a ",(0,t.jsx)(n.code,{children:"sha256"})," hash of your ",(0,t.jsx)(n.code,{children:"MASTER_MNEMONIC"})," string combined with a human-readable suffix and supplies the ",(0,t.jsx)(n.code,{children:"sha256"})," to the ",(0,t.jsx)(n.code,{children:"bip39gen"})," tool as raw entropy. Please see the table below to determine how to recreate your desired mnemonic entropy:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Validator controller, original KIRA address:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; validator addr"'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Validator signing key mnemonic:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; validator val"'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Validator node key:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; validator node"'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Sentry node key:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; sentry node"'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Seed node key:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; seed node"'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["INTERX message signing key & default faucet KIRA address:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; signer addr"'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Default test KIRA address:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'echo -n "$MASTER_MNEMONIC ; test addr"'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:":::\ud83d\udccc"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"WARNING!!! Before the hash function is applied all strings MUST be lowercase and all white spaces MUST be removed, in bash this can be ensured by using"})," ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.code,{children:"tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'"})})," ",(0,t.jsx)(n.em,{children:"command."})]}),"\n",(0,t.jsx)(n.p,{children:":::"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example of INTERX faucet mnemonic & message signing key recovery"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Your validator address mnemonic \nMASTER_MNEMONIC=\"eagle gap major artwork napkin hover gate illness ball distance awful mountain salute guard scare edit scorpion praise trust potato cotton crazy unique result\"\n\n# Entropy derived from the validator address mnemonic \nENTROPY_HEX=$(echo -n \"$MASTER_MNEMONIC ; signer addr\" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sha256sum | awk '{ print $1 }' | xargs)\n\n# Default INTERX mnemonic derivation\nbip39gen mnemonic --length=24 --raw-entropy=\"0x${ENTROPY_HEX}\" --verbose=false --hex=true\n# > dry dilemma fat polar surround monkey tragic record cement mechanic picture receive theory yard jar entry frost already tool fabric belt afraid inhale wasp\n"})}),"\n",(0,t.jsx)(n.h2,{id:"c2e623903b9d4b329dc8060d1e24a4df",children:"Signing & Node Key Derivation"}),"\n",(0,t.jsxs)(n.p,{children:["Validator signing keys and node ID keys as opposed to mnemonics corresponding to your public KIRA addresses have a binary format and must be generated from mnemonics that are ",(0,t.jsx)(n.code,{children:"MASTER_MNEMONIC"})," derived using a dedicated tool ",(0,t.jsx)(n.a,{href:"https://github.com/KiraCore/tools/releases",children:"validator-key-gen available in the tools repository on GitHub"}),". The ",(0,t.jsx)(n.code,{children:"validator-key-gen"})," can generate a validator signing key if ",(0,t.jsx)(n.code,{children:"--valkey=<file>"})," flag is provided, node key if ",(0,t.jsx)(n.code,{children:"--nodekey=<file>"})," is provided, and calculate node ID if ",(0,t.jsx)(n.code,{children:"--keyid=<file>"})," flag is set."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Secure"})," ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"validator-key-gen"})})," ",(0,t.jsx)(n.strong,{children:"Setup"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Download and install validator-key-gen\nTOOLS_VERSION="v0.3.42" && TOOL_NAME="validator-key-gen" && cd /tmp && \\\n safeWget ./${TOOL_NAME}.deb "https://github.com/KiraCore/tools/releases/download/$TOOLS_VERSION/${TOOL_NAME}-$(getPlatform)-$(getArch).deb" \\\n "QmeqFDLGfwoWgCy2ZEFXerVC5XW8c5xgRyhK5bLArBr2ue" && rm -rfv ./$TOOL_NAME && dpkg-deb -x ./${TOOL_NAME}.deb ./$TOOL_NAME && \\\n cp -fv ./$TOOL_NAME/bin/$TOOL_NAME /usr/local/bin/$TOOL_NAME && chmod +x "/usr/local/bin/$TOOL_NAME" && \\\n rm -rfv ./$TOOL_NAME ./${TOOL_NAME}.deb\n\n# Check validator-key-gen version\nvalidator-key-gen --version\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Validator Signing Key Recovery"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Your example master mnemonic \nMASTER_MNEMONIC="eagle gap major artwork napkin hover gate illness ball distance awful mountain salute guard scare edit scorpion praise trust potato cotton crazy unique result"\n\n# Entropy derived from the master mnemonic\nENTROPY_HEX=$(echo -n "${MASTER_MNEMONIC} ; validator val" | tr \'[:upper:]\' \'[:lower:]\' | tr -d \'[:space:]\' | sha256sum | awk \'{ print $1 }\' | xargs)\n\n# Derivation of the validator signing key mnemonic\nVALIDATOR_VAL_MNEMONIC=$(bip39gen mnemonic --length=24 --raw-entropy="0x${ENTROPY_HEX}" --verbose=false --hex=true)\n# > grain patch soccer child duty excite road soup quality cherry close record corn analyst ready hundred quote uphold oxygen eagle drive album practice brain\n\n# Generating validator signing key\nvalidator-key-gen --mnemonic="$VALIDATOR_VAL_MNEMONIC" --valkey="/tmp/priv_validator_key.json"\n\n# Preview example signing key\ncat "/tmp/priv_validator_key.json" \n# Signing key file example >\n{\n  "address": "22E9E935ED027D3A7B3B2B6C8344F9E97C56995F",\n  "pub_key": {\n    "type": "tendermint/PubKeyEd25519",\n    "value": "xNca/lGP3wFjlylTInAW8pEuIVwcab9gjrhpuE+k0Jk="\n  },\n  "priv_key": {\n    "type": "tendermint/PrivKeyEd25519",\n    "value": "mv7s3XNOcYAkymyfAt0ODTGdH3pXOyfEZV5QTyG1pXnE1xr+UY/fAWOXKVMicBbykS4hXBxpv2COuGm4T6TQmQ=="\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Sentry Node Key Recovery"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Your validator address mnemonic \nMASTER_MNEMONIC="eagle gap major artwork napkin hover gate illness ball distance awful mountain salute guard scare edit scorpion praise trust potato cotton crazy unique result"\n\n# Entropy derived from the master mnemonic\nENTROPY_HEX=$(echo -n "$MASTER_MNEMONIC ; sentry node" | tr \'[:upper:]\' \'[:lower:]\' | tr -d \'[:space:]\' | sha256sum | awk \'{ print $1 }\' | xargs)\n\n# Derivation of the validator signing key mnemonic\nSENTRY_NODE_MNEMONIC=$(bip39gen mnemonic --length=24 --raw-entropy="0x${ENTROPY_HEX}" --verbose=false --hex=true)\n# > test vibrant interest grape digital moment deposit trophy major priority foam assault quote deer basket awake blanket feature outer dress receive polar oxygen search\n\n# Generate sentry node key\nvalidator-key-gen --mnemonic="$SENTRY_NODE_MNEMONIC" --nodekey="/tmp/node_key.json"\n\n# Preview example node key\ncat "/tmp/node_key.json" \n# Node key file example >\n{\n  "priv_key": {\n    "type": "tendermint/PrivKeyEd25519",\n    "value": "fmuBCSfOls4anYGHl8bAwPsJ3buTaejIX4um5ZgFH9tUEoET7LwoAHxh2/xkv/a37oqPouHCEeV2f4+VvCEESA=="\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"e1756f56cea54395b43a445b1a189159",children:"Public Address Derivation"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to verify that your master mnemonic or a mnemonic derived from the master mnemonic will correspond to the correct public KIRA address or Node Id, you can do so utilizing a ",(0,t.jsx)(n.code,{children:"validator-key-gen"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example KIRA Address Derivation"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Your example master mnemonic \nMASTER_MNEMONIC=\"eagle gap major artwork napkin hover gate illness ball distance awful mountain salute guard scare edit scorpion praise trust potato cotton crazy unique result\"\n\n# Entropy derived from the master mnemonic\nENTROPY_HEX=$(echo -n \"${MASTER_MNEMONIC} ; validator addr\" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sha256sum | awk '{ print $1 }' | xargs)\n\n# Derivation of the validator address mnemonic\nVALIDATOR_ADDR_MNEMONIC=$(bip39gen mnemonic --length=24 --raw-entropy=\"0x${ENTROPY_HEX}\" --verbose=false --hex=true)\n# > moment autumn couple digital century before consider left cargo quick execute canoe author chronic hurt blast quantum blind slim throw prefer range differ squirrel\n\n# Validator KIRA address public key\nvalidator-key-gen --mnemonic=\"$VALIDATOR_ADDR_MNEMONIC\" --accadr=true --prefix=kira --path=\"44'/118'/0'/0/0\"\n# > kira1yrhm3aap6wpq2dtysquy5tau8aqpenfzjcuuqp\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Node Id Derivation"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Your example master mnemonic \nMASTER_MNEMONIC="eagle gap major artwork napkin hover gate illness ball distance awful mountain salute guard scare edit scorpion praise trust potato cotton crazy unique result"\n\n# Entropy derived from the master mnemonic\nENTROPY_HEX=$(echo -n "${MASTER_MNEMONIC} ; seed node" | tr \'[:upper:]\' \'[:lower:]\' | tr -d \'[:space:]\' | sha256sum | awk \'{ print $1 }\' | xargs)\n\n# Derivation of the seed node mnemonic\nSEED_NODE_MNEMONIC=$(bip39gen mnemonic --length=24 --raw-entropy="0x${ENTROPY_HEX}" --verbose=false --hex=true)\n# > moment autumn couple digital century before consider left cargo quick execute canoe author chronic hurt blast quantum blind slim throw prefer range differ squirrel\n\n# Generate sentry node key id\nvalidator-key-gen --mnemonic="$SEED_NODE_MNEMONIC" --keyid="/tmp/node_key_id.txt"\n\n# Preview example node key\ncat "/tmp/node_key_id.txt" \n# > d8fd8fb9b63bbbdde8493a18ad7b5d276a299151\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},5162:(e,n,r)=>{r.d(n,{Z:()=>o});r(7294);var t=r(6905);const a={tabItem:"tabItem_Ymn6"};var i=r(5893);function o(e){let{children:n,hidden:r,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,o),hidden:r,children:n})}},4866:(e,n,r)=>{r.d(n,{Z:()=>E});var t=r(7294),a=r(6905),i=r(2466),o=r(6550),s=r(469),l=r(1980),d=r(7392),c=r(12);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,d.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const a=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l._X)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,i=h(e),[o,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,u]=p({queryString:r,groupId:a}),[g,y]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.Nk)(r);return[a,(0,t.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:a}),f=(()=>{const e=d??g;return m({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),y(e)}),[u,y,i]),tabValues:i}}var y=r(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(5893);function x(e){let{className:n,block:r,selectedValue:t,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),a=s[r].value;a!==t&&(d(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},n),children:s.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:u,onClick:c,...i,className:(0,a.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:a}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function j(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,a.Z)("tabs-container",f.tabList),children:[(0,b.jsx)(x,{...e,...n}),(0,b.jsx)(v,{...e,...n})]})}function E(e){const n=(0,y.Z)();return(0,b.jsx)(j,{...e,children:u(e.children)},String(n))}},1151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>o});var t=r(7294);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);