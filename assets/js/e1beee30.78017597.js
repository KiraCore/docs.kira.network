"use strict";(self.webpackChunkkira_documentation=self.webpackChunkkira_documentation||[]).push([[3681],{8892:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"what-is-kira/introduction","title":"Introduction","description":"KIRA is a distributed, verifiable cloud computing network powering trustless, blockchain-less verifiable applications. At the core of KIRA lies a network of Consensus-Infrastructure provider nodes, each capable of independently scaling its hardware resources to meet the evolving demands of the ecosystem. To ensure application verifiability, KIRA introduces the Virtual Finality Gadget (VFG), an innovative system that enables flexible validation of application execution. This is achieved through a network of independent, permissionless verifiers called Fishermen. This approach goes beyond traditional \u2018layer 2\u2019 systems limitations by allowing developers and users to implement customized finality rules that cater to both their application requirements and/or their individual needs.","source":"@site/tabs/learn/what-is-kira/introduction.mdx","sourceDirName":"what-is-kira","slug":"/","permalink":"/learn/","draft":false,"unlisted":false,"editUrl":"https://github.com/KiraCore/docs.kira.network/issues/new?assignees=&labels=documentation,issue&projects=&template=report_an_issue.yaml&title=%5BISSUE+REPORT%5D&page-github=/learn/&page-local=what-is-kira/introduction.mdx","tags":[],"version":"current","lastUpdatedAt":1728039060000,"sidebarPosition":0,"frontMatter":{"title":"Introduction","sidebar_position":0,"slug":"/"},"sidebar":"defaultSidebar","next":{"title":"Overview","permalink":"/learn/what-is-kira/backend---sekai/overview"}}');var a=i(4848),r=i(8453);i(5537),i(9329);const s={title:"Introduction",sidebar_position:0,slug:"/"},o=void 0,l={},c=[{value:"Rollapps: Verifiable &amp; Virtualized Apps of Scale",id:"7b0c7e64cbc54f9c99a7f9c6cc57b4d2",level:2},{value:"Efficient Deployment and Liquidity for Rollapps",id:"f6c1de570cae43df93997e561b846ec3",level:2},{value:"Hypermodularity: Kira&#39;s All-in-one Architecture",id:"688908768d9540f7aeadc964ce849d56",level:2}];function u(e){const t={a:"a",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"KIRA is a distributed, verifiable cloud computing network powering trustless, blockchain-less verifiable applications. At the core of KIRA lies a network of Consensus-Infrastructure provider nodes, each capable of independently scaling its hardware resources to meet the evolving demands of the ecosystem. To ensure application verifiability, KIRA introduces the Virtual Finality Gadget (VFG), an innovative system that enables flexible validation of application execution. This is achieved through a network of independent, permissionless verifiers called Fishermen. This approach goes beyond traditional \u2018layer 2\u2019 systems limitations by allowing developers and users to implement customized finality rules that cater to both their application requirements and/or their individual needs."}),"\n",(0,a.jsx)(t.p,{children:"Through the all-encompassing modular design, KIRA consolidates its entire stack\u2014 SEKAI (core blockchain), INTERX (content availability layer), RYOKAI (DevOps software), and MIRO (front-end application)\u2014into a single, all-inclusive solution. This integrated approach\u2014which we refer to as \u2018hypermodularity\u2019\u2014aims to avoid the compounded complexity, latency, and risks of integrating applications across separate external systems. KIRA's unified stack provides the infrastructure, scalable hardware resources, data availability, sequencing, and shared security needed by new generations of decentralized, resource-intensive, Web2-like applications (such as gaming and AI). With KIRA, these applications can rival Web2 in user access scale, ease of building, deployment time, and operational costs, while remaining independent from traditional blockchain infrastructures and their inefficient virtual machines needed for smart contract execution."}),"\n",(0,a.jsx)(t.h2,{id:"7b0c7e64cbc54f9c99a7f9c6cc57b4d2",children:"Rollapps: Verifiable & Virtualized Apps of Scale"}),"\n",(0,a.jsx)(t.p,{children:"KIRA applications also referred to as RollApps, run isolated and virtualized within dedicated Docker containers. They are executed by an unbounded set of validators (we will refer to as Consensus nodes) who validate SEKAI (KIRA's blockchain application) and govern the entire KIRA network. These nodes have the flexibility to choose which RollApp(s) they agree to operate and can independently scale their hardware resources to meet their requirements. Individuals with minimal resources or technical expertise can participate from home, as they have the flexibility to choose which RollApps to execute or simply focus on validating SEKAI. This flexible approach enables KIRA to provide tailored cloud-like services for each RollApp while maintaining an accessible entry point for consensus node operators\u2014thus maximizing the network\u2019s decentralization."}),"\n",(0,a.jsxs)(t.p,{children:["In KIRA, RollApps benefit from the ",(0,a.jsx)(t.a,{href:"/learn/what-is-kira/layer-2/virtual-finality-gadget",children:"Virtual Finality Gadget"})," which allows developers to use any programming language as well as implement bespoke finality rules, including optimistic and pessimistic verification (e.g. ZK proofs), non-deterministic verification or a tailored blend of verification logics, each specifically designed for a particular subsystem. This provides a level of flexibility unheard of in traditional systems as applications can adjust their verification strategies in response to evolving needs and innovations, without the risk of dedicating substantial resources or time to a single method. This adaptability and degree of freedom allow developers to maximize the potential and full expression of general-purpose rollups."]}),"\n",(0,a.jsx)(t.p,{children:"VFG significantly enhances application security by naturally incentivizing end-users to become Fishermen (Verifiers) for their favorite RollApps with minimal cost of self-hosted hardware. Users can define custom and simple rules\u2014such as auditing their own account balances\u2014to protect themselves against hacks without needing to re-execute entire application states for validation. The private nature of these finality rules makes it virtually impossible for attackers to predict the success of their exploits. This contrasts sharply with traditional systems that rely on finality through re-execution of publicly known and deterministic state transition functions. Since verification rules can be fully customized, nothing stops users from employing custom schemes including AI agents monitoring applications to spot new potential exploits in real-time."}),"\n",(0,a.jsx)(t.h2,{id:"f6c1de570cae43df93997e561b846ec3",children:"Efficient Deployment and Liquidity for Rollapps"}),"\n",(0,a.jsx)(t.p,{children:"KIRA's deployment process is remarkably simple. Developers package their application logic (using any programming language) into a Docker container and submit it to KIRA's app registry. KIRA's infrastructure then manages the deployment, resource allocation, and consensus rules, freeing developers to focus on their application logic rather than grappling with complex blockchain integration. The only requirement is that the application must be verifiable by VFG. This means the application's state transitions can be validated through a combination of diverse, private verification rules set by Fishermen. Importantly, these rules do not need to enforce a single, deterministic outcome. Rather, they can accommodate a range of acceptable states. This approach enables even non-deterministic applications (such as AI) to run on KIRA, as long as their outputs fall within the collective boundaries defined by the Fishermen's rules. Given this high degree of freedom, virtually any application can be deployed on KIRA, limited only by the developers' imagination and the Fishermen's verification rules. Examples include EVM rollups/sidechains, 'decentralized\u2019 node clients (like Ethereum's Geth), GPT-style chats, IRC-like chats, Nostr servers, and game servers, among countless other possibilities."}),"\n",(0,a.jsxs)(t.p,{children:["Complementing this streamlined deployment process, KIRA introduces the ",(0,a.jsx)(t.a,{href:"/learn/kira%E2%80%99s-economics/initial-liquidity-offering-for-rollapps",children:"Initial Liquidity Offering"})," (ILO), a novel economic model ensuring that applications launched on the network meet user demand, and provide sufficient liquidity for their tokens upon launch. By aligning the incentives of users, developers, Executors, and Fishermen, the ILO model promotes the development and enjoyment of high-quality RollApps while enabling all stakeholders to share in these applications' success."]}),"\n",(0,a.jsx)(t.h2,{id:"688908768d9540f7aeadc964ce849d56",children:"Hypermodularity: Kira's All-in-one Architecture"}),"\n",(0,a.jsx)(t.p,{children:"Unlike traditional modular architectures where different parts of a broad system operate independently with distinct security assumptions and are separated in physical networking space, KIRA's hypermodular approach integrates various functionalities\u2014such as data availability, dAPI, shared security, and interoperability\u2014into one cohesive stack. This unified architecture enables efficient resource utilization, particularly in terms of bandwidth management, making it possible to run resource-intensive applications in decentralized environments that were previously impractical due to network and system complexity constraints. Another key advantage of hypermodularity is its improvement of the developer experience. By consolidating components, it removes the need to manage and coordinate multiple disparate systems. In essence, hypermodularity unifies all crucial networking and system stack components under a single security model umbrella and creates a highly optimized system where applications of scale can thrive."}),"\n",(0,a.jsx)(t.p,{children:"The KIRA stack consists of the following components:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/learn/what-is-kira/backend---sekai/overview",children:(0,a.jsx)(t.strong,{children:"SEKAI"})}),": SEKAI is KIRA\u2019s core blockchain application responsible for all on-chain logic, including the settling of users' and RollApp's account balances, preserving state integrity, and enabling cross-RollApp communication. It orchestrates the infrastructure needed to run RollApps, provides liquid capital to boost economic activity, and ensures shared security for all applications on KIRA."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/learn/what-is-kira/middleware---interx/overview",children:(0,a.jsx)(t.strong,{children:"INTERX"})}),": INTERX is KIRA\u2019s Content Availability Layer. It ensures rapid, scalable queries and access to on-chain (SEKAI) and off-chain (RollApps) data without reliance on third-party RPC service providers such as Infura (Ethereum) and DA networks such as Celestia (Cosmos). INTERX streamlines the creation and maintenance of front-end and RollApp, eliminating the complexities associated with light clients and providing out-of-the-box support for sequencing, storage, fraud-proof generation, replication, proxy, and load-balancing."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/learn/what-is-kira/orchestrator---ryokai",children:(0,a.jsx)(t.strong,{children:"RYOKAI"})}),": RYOKAI is KIRA's all-in-one DevOps solution that streamlines network operations for Consensus nodes. It automates on-chain and off-chain upgrades, facilitates scaling, and simplifies RollApp deployment and other management tasks. By simplifying these operations, RYOKAI significantly lowers the technical barrier to entry and turns any user into an infrastructure expert without years of experience. Hence, even those with limited technical knowledge can contribute meaningfully to KIRA's security and growth. This accessibility, combined with the network's modest hardware requirements, aims to maximize KIRA's decentralization potential."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/learn/what-is-kira/frontend---miro",children:(0,a.jsx)(t.strong,{children:"MIRO"})}),": MIRO is a front-end application and web wallet enabling you to kick off your adventure with KIRA. It provides a user-friendly experience similar to Web2 applications while maintaining Web3-level security. MIRO is a static and fully self-contained application, enabling users to seamlessly interact with the KIRA blockchain through INTERX from within the security of their own browser application. There are no centralized parties involved (including certificate authorities) in the middle (or at the security core) of the communication channel between the user and the blockchain."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},9329:(e,t,i)=>{i.d(t,{A:()=>s});i(6540);var n=i(8215);const a={tabItem:"tabItem_Ymn6"};var r=i(4848);function s(e){let{children:t,hidden:i,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,s),hidden:i,children:t})}},5537:(e,t,i)=>{i.d(t,{A:()=>k});var n=i(6540),a=i(8215),r=i(5627),s=i(6347),o=i(372),l=i(604),c=i(1861),u=i(8749);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:i}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:i,attributes:n,default:a}}=e;return{value:t,label:i,attributes:n,default:a}}))}(i);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,i])}function p(e){let{value:t,tabValues:i}=e;return i.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:i}=e;const a=(0,s.W6)(),r=function(e){let{queryString:t=!1,groupId:i}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:t,groupId:i});return[(0,l.aZ)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function f(e){const{defaultValue:t,queryString:i=!1,groupId:a}=e,r=h(e),[s,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=i.find((e=>e.default))??i[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[c,d]=m({queryString:i,groupId:a}),[f,b]=function(e){let{groupId:t}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Dv)(i);return[a,(0,n.useCallback)((e=>{i&&r.set(e)}),[i,r])]}({groupId:a}),g=(()=>{const e=c??f;return p({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),b(e)}),[d,b,r]),tabValues:r}}var b=i(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=i(4848);function y(e){let{className:t,block:i,selectedValue:n,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const t=e.currentTarget,i=l.indexOf(t),a=o[i].value;a!==n&&(c(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const i=l.indexOf(e.currentTarget)+1;t=l[i]??l[0];break}case"ArrowLeft":{const i=l.indexOf(e.currentTarget)-1;t=l[i]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":i},t),children:o.map((e=>{let{value:t,label:i,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>{l.push(e)},onKeyDown:d,onClick:u,...r,className:(0,a.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":n===t}),children:i??t},t)}))})}function w(e){let{lazy:t,children:i,selectedValue:r}=e;const s=(Array.isArray(i)?i:[i]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function I(e){const t=f(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,v.jsx)(y,{...t,...e}),(0,v.jsx)(w,{...t,...e})]})}function k(e){const t=(0,b.A)();return(0,v.jsx)(I,{...e,children:d(e.children)},String(t))}},8453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>o});var n=i(6540);const a={},r=n.createContext(a);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);