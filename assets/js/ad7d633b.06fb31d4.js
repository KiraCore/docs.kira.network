"use strict";(self.webpackChunkkira_documentation=self.webpackChunkkira_documentation||[]).push([[7446],{6131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(5893),a=n(1151);n(4866),n(5162);const r={title:"Connecting to Seed Nodes",sidebar_position:3,slug:"connecting-to-seed-nodes"},s=void 0,i={id:"run-a-consensus-node/connecting-to-seed-nodes",title:"Connecting to Seed Nodes",description:"When connecting to a new network, it is important to pay attention to certain details to ensure that you are joining the correct chain. One of the key factors to consider is the number of peers in the network, as this can give you an idea in regards to the legitimacy of the chain (it is unlikely the attacker would be hosting hundreds of active nodes). In addition, it is crucial to verify both the Genesis Hash and network name to confirm that you are connecting to the intended chain. To find the hash of the genesis file, you can refer to the active testnet information page, which should provide all the necessary information to help you make an informed decision about joining the network.",source:"@site/tabs/testnet/run-a-consensus-node/connecting-to-seed-nodes.mdx",sourceDirName:"run-a-consensus-node",slug:"/run-a-consensus-node/connecting-to-seed-nodes",permalink:"/testnet/run-a-consensus-node/connecting-to-seed-nodes",draft:!1,unlisted:!1,editUrl:"https://github.com/KiraCore/docs.kira.network/issues/new?assignees=&labels=documentation,issue&projects=&template=report_an_issue.yaml&title=%5BISSUE+REPORT%5D&page-github=/testnet/run-a-consensus-node/connecting-to-seed-nodes&page-local=run-a-consensus-node/connecting-to-seed-nodes.mdx",tags:[],version:"current",lastUpdatedAt:1720521339e3,sidebarPosition:3,frontMatter:{title:"Connecting to Seed Nodes",sidebar_position:3,slug:"connecting-to-seed-nodes"},sidebar:"defaultSidebar",previous:{title:"Node Setup",permalink:"/testnet/run-a-consensus-node/node-setup"},next:{title:"Joining Validator Set",permalink:"/testnet/run-a-consensus-node/joining-validator-set"}},c={},u=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",img:"img",p:"p",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.admonition,{type:"caution",children:(0,o.jsx)(t.p,{children:"When connecting to a new network, it is important to pay attention to certain details to ensure that you are joining the correct chain. One of the key factors to consider is the number of peers in the network, as this can give you an idea in regards to the legitimacy of the chain (it is unlikely the attacker would be hosting hundreds of active nodes). In addition, it is crucial to verify both the Genesis Hash and network name to confirm that you are connecting to the intended chain. To find the hash of the genesis file, you can refer to the active testnet information page, which should provide all the necessary information to help you make an informed decision about joining the network."})}),"\n",(0,o.jsxs)(t.p,{children:["Once you have accepted the initial terms and conditions, you will be presented with the Launcher Menu, which enables you to configure your node, manage networking settings, download snapshots, and preview the hash of a genesis file. Within the Node Launcher Menu, you will need to specify the IP address of a trusted seed node or another validator. Your node will use this connection to synchronize with other nodes on the network and keep its copy of the blockchain up to date. You can request an IP address from any of the fellow validators in the ",(0,o.jsx)(t.a,{href:"https://testers.kira.network/",children:"testers\u2019 chat"}),", or use an address of a genesis validator that is listed in the corresponding testnet section below."]}),"\n",(0,o.jsxs)(t.p,{children:["Every node has a connection limit and the official genesis validator may be targeted by the DOS/DDOS, and thus become non-operational or non-responsive to the new peers. If this happens, node operators will need to coordinate via the ",(0,o.jsx)(t.a,{href:"https://testers.kira.network/",children:"testers\u2019 chat"})," and share between each other IP or DNS addresses of their personal validator, seed, or sentry nodes. Alternatively, testers can utilize any endpoint of an active INTERX node at ",(0,o.jsx)(t.code,{children:"<IP>:11000/api/pub_p2p_list"})," where ",(0,o.jsx)(t.code,{children:"<IP>"})," is an IP of any public testnet node to discover more IP addresses."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Interactive KM Setup - Launcher Menu",src:n(1837).Z+"",width:"733",height:"440"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>s});n(7294);var o=n(6905);const a={tabItem:"tabItem_Ymn6"};var r=n(5893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,s),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>x});var o=n(7294),a=n(6905),r=n(2466),s=n(6550),i=n(469),c=n(1980),u=n(7392),l=n(812);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=h(e),[s,c]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[u,d]=f({queryString:n,groupId:a}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,l.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),g=(()=>{const e=u??m;return p({value:e,tabValues:r})?e:null})();(0,i.Z)((()=>{g&&c(g)}),[g]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),b(e)}),[d,b,r]),tabValues:r}}var b=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(5893);function y(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,r.o5)(),l=e=>{const t=e.currentTarget,n=c.indexOf(t),a=i[n].value;a!==o&&(u(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,ref:e=>c.push(e),onKeyDown:d,onClick:l,...r,className:(0,a.Z)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":o===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function k(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,a.Z)("tabs-container",g.tabList),children:[(0,v.jsx)(y,{...t,...e}),(0,v.jsx)(w,{...t,...e})]})}function x(e){const t=(0,b.Z)();return(0,v.jsx)(k,{...e,children:d(e.children)},String(t))}},1837:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/2032290687-fd4b339e9c40cec2401d37335fc08dc1.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var o=n(7294);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);